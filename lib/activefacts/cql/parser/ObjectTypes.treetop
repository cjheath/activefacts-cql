#
#       ActiveFacts CQL Parser.
#       Parse rules relating to ObjectType definitions.
#
# Copyright (c) 2009 Clifford Heath. Read the LICENSE file.
#
module ActiveFacts
  module CQL
    grammar ObjectTypes
      rule object_type
        value_type
        / entity_type
      end

      rule entity_type
        s each?
        s term
        m1:mapping_pragmas
        context:context_note?
        sup:(basetype / subtype)
          &{|s|	  # s[6] has not yet been named "sup"
            # There's an implicit type when we use an identification mode, register the name with the term recogniser:
            if mode = s[6].identification_mode
              input.parser.new_object_type_name(s[3].value+mode, "identification mode type")
              input.parser.new_object_type_name(s[3].value+' '+mode, "identification mode type")
            end
            true
          }
        m2:mapping_pragmas
        context2:context_note?
        ec:(where s reading_clauses)?
        ';'
	<Parser::EntityType>
      end

      rule basetype
        basetype_expression
        {
          def ast; identification.ast; end
          def supers; []; end
          def identification_mode; identification.mode; end
          def independent; !i.empty?; end
        }
      end

      rule subtype
        subtype_expression
        {
          def ast; ident.empty? ? nil : ident.ast; end
          def supers; supertype_list.value; end
          def identification_mode; ident.empty? ? nil : ident.mode; end
          def independent; !i.empty?; end
        }
      end

      rule supertype_list
        primary:term s alternate_supertypes:( (','/'and' !alpha) s !identified_by name:term s )*
        {
          def value
            [primary.value, *alternate_supertypes.elements.map { |sup| sup.name.value } ]
          end
        }
      end

      rule identification
        identified_by its s		# Reference Mode
	i:(term/implicit_value_type_name) value_type_parameters
        vc:value_constraint?
	<Parser::ReferenceMode>
        /
        identified_by role_list	  # REVISIT: We'd like to be able to use implicit_value_type_names here too.
	  &{|s| allow_forward_terms_in s[-1].ast; true }
	<Parser::IdentificationList>
      end

      # Identified by roles... also used for constraints, beware
      rule role_list 
        a:any? s
        head:term_or_unary s
        tail:(
          ( and S / ',' s )
          any? s
          term_or_unary s
        )*
        {
          def ast
            [head.ast, *tail.elements.map{|e| e.term_or_unary.ast}]
          end
        }
      end

      rule term_or_unary
        pre_text:unary_text s term post_text:unary_text s ss:subscript?
	<Parser::UnaryTerm>
        /
        s !non_phrase id s &non_phrase s ss:subscript?
	<Parser::ForwardTerm>
      end

      rule unary_text
        (s !any !non_phrase !term id)*
        {
          def node_type; :linking; end
        }
      end

      rule mapping_pragmas
        '[' s h:mapping_pragma t:(s ',' s mapping_pragma)* s ']' s
          {
            def value
              t.elements.inject([h.value*' ']) do |a, e|
                a << e.mapping_pragma.value*' '
              end
            end
          }
        /
        s
          { def value; []; end }
      end

      # Each mapping_pragma returns an array of words
      rule mapping_pragma
        was s names:(id s)+
        {   # Old or previous name of an object type:
          def value
            [ was.text_value, *names.elements.map{|n|n.text_value}]
          end
        }
        /
        head:id tail:(s id)*
        {   # A sequence of one or more words denoting a pragma:
          def value
            ([head]+tail.elements.map(&:id)).map(&:text_value)
          end
        }
      end

    end
  end
end
