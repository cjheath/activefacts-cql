#
# Autogenerated from a Treetop grammar. Edits may be lost.


#       ActiveFacts CQL Parser.
#       Parse rules relating to Expressions
#
# Copyright (c) 2009 Clifford Heath. Read the LICENSE file.
#
module ActiveFacts
  module CQL
    module Expressions
      include Treetop::Runtime

      def root
        @root ||= :expression
      end

      def _nt_expression
        start_index = index
        if node_cache[:expression].has_key?(index)
          cached = node_cache[:expression][index]
          if cached
            node_cache[:expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        r0 = _nt_sum

        node_cache[:expression][start_index] = r0

        r0
      end

      module Sum0
        def op
          elements[0]
        end

        def s1
          elements[1]
        end

        def t1
          elements[2]
        end

        def s2
          elements[3]
        end
      end

      module Sum1
        def t0
          elements[0]
        end

        def s
          elements[1]
        end

        def tail
          elements[2]
        end
      end

      module Sum2
        def ast
          if tail.elements.empty?
            t0.ast
          else
            Compiler::Sum.new(t0.ast, *tail.elements.map{|e| e.op.text_value == '-' ? Compiler::Negate.new(e.t1.ast) : e.t1.ast})
          end
        end
      end

      def _nt_sum
        start_index = index
        if node_cache[:sum].has_key?(index)
          cached = node_cache[:sum][index]
          if cached
            node_cache[:sum][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_product
        s0 << r1
        if r1
          r2 = _nt_s
          s0 << r2
          if r2
            s3, i3 = [], index
            loop do
              i4, s4 = index, []
              r5 = _nt_add_op
              s4 << r5
              if r5
                r6 = _nt_s
                s4 << r6
                if r6
                  r7 = _nt_product
                  s4 << r7
                  if r7
                    r8 = _nt_s
                    s4 << r8
                  end
                end
              end
              if s4.last
                r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
                r4.extend(Sum0)
              else
                @index = i4
                r4 = nil
              end
              if r4
                s3 << r4
              else
                break
              end
            end
            r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
            s0 << r3
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(Sum1)
          r0.extend(Sum2)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:sum][start_index] = r0

        r0
      end

      def _nt_add_op
        start_index = index
        if node_cache[:add_op].has_key?(index)
          cached = node_cache[:add_op][index]
          if cached
            node_cache[:add_op][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        if (match_len = has_terminal?('+', false, index))
          r1 = true
          @index += match_len
        else
          terminal_parse_failure('\'+\'')
          r1 = nil
        end
        if r1
          r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
          r0 = r1
        else
          if (match_len = has_terminal?('-', false, index))
            r2 = true
            @index += match_len
          else
            terminal_parse_failure('\'-\'')
            r2 = nil
          end
          if r2
            r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
            r0 = r2
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:add_op][start_index] = r0

        r0
      end

      module Product0
        def op
          elements[0]
        end

        def s1
          elements[1]
        end

        def f1
          elements[2]
        end

        def s2
          elements[3]
        end
      end

      module Product1
        def f0
          elements[0]
        end

        def s
          elements[1]
        end

        def tail
          elements[2]
        end
      end

      module Product2
        def ast
          if tail.elements.empty?
            f0.ast
          else
            Compiler::Product.new(f0.ast, *tail.elements.map{|e| e.op.text_value != '*' ? Compiler::Reciprocal.new(e.op.text_value, e.f1.ast) : e.f1.ast})
          end
        end
      end

      def _nt_product
        start_index = index
        if node_cache[:product].has_key?(index)
          cached = node_cache[:product][index]
          if cached
            node_cache[:product][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_factor
        s0 << r1
        if r1
          r2 = _nt_s
          s0 << r2
          if r2
            s3, i3 = [], index
            loop do
              i4, s4 = index, []
              r5 = _nt_mul_op
              s4 << r5
              if r5
                r6 = _nt_s
                s4 << r6
                if r6
                  r7 = _nt_factor
                  s4 << r7
                  if r7
                    r8 = _nt_s
                    s4 << r8
                  end
                end
              end
              if s4.last
                r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
                r4.extend(Product0)
              else
                @index = i4
                r4 = nil
              end
              if r4
                s3 << r4
              else
                break
              end
            end
            r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
            s0 << r3
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(Product1)
          r0.extend(Product2)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:product][start_index] = r0

        r0
      end

      module Factor0
        def literal
          elements[0]
        end

        def u
          elements[1]
        end

        def s
          elements[2]
        end
      end

      module Factor1
        def ast
          Compiler::Literal.new(literal.value, u.empty? ? nil : u.text_value)
        end
      end

      module Factor2
        def s1
          elements[2]
        end

        def sum
          elements[3]
        end

        def s2
          elements[4]
        end

        def s3
          elements[6]
        end
      end

      module Factor3
        def ast; sum.ast; end
      end

      def _nt_factor
        start_index = index
        if node_cache[:factor].has_key?(index)
          cached = node_cache[:factor][index]
          if cached
            node_cache[:factor][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        i1, s1 = index, []
        r2 = _nt_literal
        s1 << r2
        if r2
          r4 = _nt_unit
          if r4
            r3 = r4
          else
            r3 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r3
          if r3
            r5 = _nt_s
            s1 << r5
          end
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(Factor0)
          r1.extend(Factor1)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
          r0 = r1
        else
          r6 = _nt_derived_variable
          if r6
            r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
            r0 = r6
          else
            i7, s7 = index, []
            i8 = index
            r9 = _nt_context_note
            if r9
              @index = i8
              r8 = nil
            else
              @index = i8
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s7 << r8
            if r8
              if (match_len = has_terminal?('(', false, index))
                r10 = true
                @index += match_len
              else
                terminal_parse_failure('\'(\'')
                r10 = nil
              end
              s7 << r10
              if r10
                r11 = _nt_s
                s7 << r11
                if r11
                  r12 = _nt_sum
                  s7 << r12
                  if r12
                    r13 = _nt_s
                    s7 << r13
                    if r13
                      if (match_len = has_terminal?(')', false, index))
                        r14 = true
                        @index += match_len
                      else
                        terminal_parse_failure('\')\'')
                        r14 = nil
                      end
                      s7 << r14
                      if r14
                        r15 = _nt_s
                        s7 << r15
                      end
                    end
                  end
                end
              end
            end
            if s7.last
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              r7.extend(Factor2)
              r7.extend(Factor3)
            else
              @index = i7
              r7 = nil
            end
            if r7
              r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
              r0 = r7
            else
              @index = i0
              r0 = nil
            end
          end
        end

        node_cache[:factor][start_index] = r0

        r0
      end

      module DerivedVariable0
        def derived
          elements[0]
        end

        def s
          elements[1]
        end

        def role_id
          elements[2]
        end
      end

      module DerivedVariable1
        def ast quantifier = nil, value_constraint = nil, literal = nil, nested_clauses = nil
          role_name = role_id.empty? ? nil : role_id.value
          derived.ast(quantifier, nil, role_name, value_constraint, literal, nested_clauses)
        end
      end

      def _nt_derived_variable
        start_index = index
        if node_cache[:derived_variable].has_key?(index)
          cached = node_cache[:derived_variable][index]
          if cached
            node_cache[:derived_variable][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_term
        s0 << r1
        if r1
          r2 = _nt_s
          s0 << r2
          if r2
            i4 = index
            r5 = _nt_role_name
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r4 = r5
            else
              r6 = _nt_subscript
              if r6
                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                r4 = r6
              else
                @index = i4
                r4 = nil
              end
            end
            if r4
              r3 = r4
            else
              r3 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r3
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(DerivedVariable0)
          r0.extend(DerivedVariable1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:derived_variable][start_index] = r0

        r0
      end

    end

    class ExpressionsParser < Treetop::Runtime::CompiledParser
      include Expressions
    end

  end
end
