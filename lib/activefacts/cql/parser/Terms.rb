#
# Autogenerated from a Treetop grammar. Edits may be lost.


#       ActiveFacts CQL Parser.
#       Parse rules relating to Term names
#
# Copyright (c) 2009 Clifford Heath. Read the LICENSE file.
#
module ActiveFacts
  module CQL
    module Terms
      include Treetop::Runtime

      def root
        @root ||= :term_definition_name
      end

      module TermDefinitionName0
        def id
          elements[1]
        end

        def s
          elements[2]
        end
      end

      module TermDefinitionName1
        def id
          elements[0]
        end

        def s
          elements[1]
        end

        def t
          elements[2]
        end
      end

      def _nt_term_definition_name
        start_index = index
        if node_cache[:term_definition_name].has_key?(index)
          cached = node_cache[:term_definition_name][index]
          if cached
            node_cache[:term_definition_name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_id
        s0 << r1
        if r1
          r2 = _nt_s
          s0 << r2
          if r2
            s3, i3 = [], index
            loop do
              i4, s4 = index, []
              i5 = index
              r6 = _nt_non_term_def
              if r6
                @index = i5
                r5 = nil
              else
                @index = i5
                r5 = instantiate_node(SyntaxNode,input, index...index)
              end
              s4 << r5
              if r5
                r7 = _nt_id
                s4 << r7
                if r7
                  r8 = _nt_s
                  s4 << r8
                end
              end
              if s4.last
                r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
                r4.extend(TermDefinitionName0)
              else
                @index = i4
                r4 = nil
              end
              if r4
                s3 << r4
              else
                break
              end
            end
            r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
            s0 << r3
          end
        end
        if s0.last
          r0 = instantiate_node(Parser::TermDefinitionNameNode,input, i0...index, s0)
          r0.extend(TermDefinitionName1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:term_definition_name][start_index] = r0

        r0
      end

      module NonTermDef0
        def mapping_pragmas
          elements[0]
        end

        def entity_prefix
          elements[1]
        end
      end

      module NonTermDef1
        def mapping_pragmas
          elements[0]
        end

        def written_as
          elements[1]
        end
      end

      module NonTermDef2
        def mapping_pragmas
          elements[0]
        end

        def is_where
          elements[1]
        end
      end

      def _nt_non_term_def
        start_index = index
        if node_cache[:non_term_def].has_key?(index)
          cached = node_cache[:non_term_def][index]
          if cached
            node_cache[:non_term_def][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        i1, s1 = index, []
        r2 = _nt_mapping_pragmas
        s1 << r2
        if r2
          r3 = _nt_entity_prefix
          s1 << r3
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(NonTermDef0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
          r0 = r1
        else
          i4, s4 = index, []
          r5 = _nt_mapping_pragmas
          s4 << r5
          if r5
            r6 = _nt_written_as
            s4 << r6
          end
          if s4.last
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            r4.extend(NonTermDef1)
          else
            @index = i4
            r4 = nil
          end
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            i7, s7 = index, []
            r8 = _nt_mapping_pragmas
            s7 << r8
            if r8
              r9 = _nt_is_where
              s7 << r9
            end
            if s7.last
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              r7.extend(NonTermDef2)
            else
              @index = i7
              r7 = nil
            end
            if r7
              r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
              r0 = r7
            else
              r10 = _nt_non_phrase
              if r10
                r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                r0 = r10
              else
                r11 = _nt_identified_by
                if r11
                  r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
                  r0 = r11
                else
                  r12 = _nt_in_units
                  if r12
                    r12 = SyntaxNode.new(input, (index-1)...index) if r12 == true
                    r0 = r12
                  else
                    r13 = _nt_auto_assignment
                    if r13
                      r13 = SyntaxNode.new(input, (index-1)...index) if r13 == true
                      r0 = r13
                    else
                      r14 = _nt_value_constraint
                      if r14
                        r14 = SyntaxNode.new(input, (index-1)...index) if r14 == true
                        r0 = r14
                      else
                        @index = i0
                        r0 = nil
                      end
                    end
                  end
                end
              end
            end
          end
        end

        node_cache[:non_term_def][start_index] = r0

        r0
      end

      module EntityPrefix0
        def independent
          elements[0]
        end

        def s
          elements[1]
        end
      end

      module EntityPrefix1
        def is
          elements[0]
        end

        def s
          elements[1]
        end

        def identified_by
          elements[3]
        end
      end

      module EntityPrefix2
        def independent
          elements[0]
        end

        def s
          elements[1]
        end
      end

      module EntityPrefix3
        def subtype_prefix
          elements[0]
        end

        def term_definition_name
          elements[2]
        end

      end

      def _nt_entity_prefix
        start_index = index
        if node_cache[:entity_prefix].has_key?(index)
          cached = node_cache[:entity_prefix][index]
          if cached
            node_cache[:entity_prefix][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        i1, s1 = index, []
        r2 = _nt_is
        s1 << r2
        if r2
          r3 = _nt_s
          s1 << r3
          if r3
            i5, s5 = index, []
            r6 = _nt_independent
            s5 << r6
            if r6
              r7 = _nt_s
              s5 << r7
            end
            if s5.last
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              r5.extend(EntityPrefix0)
            else
              @index = i5
              r5 = nil
            end
            if r5
              r4 = r5
            else
              r4 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r4
            if r4
              r8 = _nt_identified_by
              s1 << r8
            end
          end
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(EntityPrefix1)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
          r0 = r1
        else
          i9, s9 = index, []
          r10 = _nt_subtype_prefix
          s9 << r10
          if r10
            i12, s12 = index, []
            r13 = _nt_independent
            s12 << r13
            if r13
              r14 = _nt_s
              s12 << r14
            end
            if s12.last
              r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
              r12.extend(EntityPrefix2)
            else
              @index = i12
              r12 = nil
            end
            if r12
              r11 = r12
            else
              r11 = instantiate_node(SyntaxNode,input, index...index)
            end
            s9 << r11
            if r11
              r15 = _nt_term_definition_name
              s9 << r15
              if r15
                i16 = index
                r17 = lambda {|e| input.context.object_type(e[2].value, "subtype") }.call(s9)
                if !r17
                  terminal_parse_failure("<semantic predicate>")
                end
                if r17
                  @index = i16
                  r16 = instantiate_node(SyntaxNode,input, index...index)
                else
                  @index = i16
                  r16 = nil
                end
                s9 << r16
              end
            end
          end
          if s9.last
            r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
            r9.extend(EntityPrefix3)
          else
            @index = i9
            r9 = nil
          end
          if r9
            r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
            r0 = r9
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:entity_prefix][start_index] = r0

        r0
      end

      module Prescan0
        def term_definition_name
          elements[0]
        end

        def mapping_pragmas
          elements[1]
        end

        def entity_prefix
          elements[2]
        end

      end

      module Prescan1
        def t1
          elements[0]
        end

        def mapping_pragmas
          elements[1]
        end

        def written_as
          elements[2]
        end

        def s
          elements[4]
        end

        def t2
          elements[5]
        end

      end

      module Prescan2
        def term_definition_name
          elements[0]
        end

        def s
          elements[1]
        end

        def mapping_pragmas
          elements[2]
        end

        def is_where
          elements[3]
        end

      end

      module Prescan3
        def s1
          elements[0]
        end

        def s2
          elements[2]
        end

        def prescan_rest
          elements[4]
        end

      end

      def _nt_prescan
        start_index = index
        if node_cache[:prescan].has_key?(index)
          cached = node_cache[:prescan][index]
          if cached
            node_cache[:prescan][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_s
        s0 << r1
        if r1
          r3 = _nt_each
          if r3
            r2 = r3
          else
            r2 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r2
          if r2
            r4 = _nt_s
            s0 << r4
            if r4
              i6 = index
              i7, s7 = index, []
              r8 = _nt_term_definition_name
              s7 << r8
              if r8
                r9 = _nt_mapping_pragmas
                s7 << r9
                if r9
                  r10 = _nt_entity_prefix
                  s7 << r10
                  if r10
                    i11 = index
                    r12 = lambda {|e| input.context.object_type(e[0].value, "entity type") }.call(s7)
                    if !r12
                      terminal_parse_failure("<semantic predicate>")
                    end
                    if r12
                      @index = i11
                      r11 = instantiate_node(SyntaxNode,input, index...index)
                    else
                      @index = i11
                      r11 = nil
                    end
                    s7 << r11
                  end
                end
              end
              if s7.last
                r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
                r7.extend(Prescan0)
              else
                @index = i7
                r7 = nil
              end
              if r7
                r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                r6 = r7
              else
                i13, s13 = index, []
                r14 = _nt_term_definition_name
                s13 << r14
                if r14
                  r15 = _nt_mapping_pragmas
                  s13 << r15
                  if r15
                    r16 = _nt_written_as
                    s13 << r16
                    if r16
                      r18 = _nt_any
                      if r18
                        r17 = r18
                      else
                        r17 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s13 << r17
                      if r17
                        r19 = _nt_s
                        s13 << r19
                        if r19
                          r20 = _nt_term_definition_name
                          s13 << r20
                          if r20
                            i21 = index
                            r22 = lambda {|e|
                                              new_term = e[0].value
                                              input.context.object_type(new_term, "value type")
                                              base_term = e[5].value
                                              input.context.object_type(base_term, "value type")
                                            }.call(s13)
                            if !r22
                              terminal_parse_failure("<semantic predicate>")
                            end
                            if r22
                              @index = i21
                              r21 = instantiate_node(SyntaxNode,input, index...index)
                            else
                              @index = i21
                              r21 = nil
                            end
                            s13 << r21
                          end
                        end
                      end
                    end
                  end
                end
                if s13.last
                  r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                  r13.extend(Prescan1)
                else
                  @index = i13
                  r13 = nil
                end
                if r13
                  r13 = SyntaxNode.new(input, (index-1)...index) if r13 == true
                  r6 = r13
                else
                  i23, s23 = index, []
                  r24 = _nt_term_definition_name
                  s23 << r24
                  if r24
                    r25 = _nt_s
                    s23 << r25
                    if r25
                      r26 = _nt_mapping_pragmas
                      s23 << r26
                      if r26
                        r27 = _nt_is_where
                        s23 << r27
                        if r27
                          i28 = index
                          r29 = lambda {|e| input.context.object_type(e[0].value, "objectified_fact_type") }.call(s23)
                          if !r29
                            terminal_parse_failure("<semantic predicate>")
                          end
                          if r29
                            @index = i28
                            r28 = instantiate_node(SyntaxNode,input, index...index)
                          else
                            @index = i28
                            r28 = nil
                          end
                          s23 << r28
                        end
                      end
                    end
                  end
                  if s23.last
                    r23 = instantiate_node(SyntaxNode,input, i23...index, s23)
                    r23.extend(Prescan2)
                  else
                    @index = i23
                    r23 = nil
                  end
                  if r23
                    r23 = SyntaxNode.new(input, (index-1)...index) if r23 == true
                    r6 = r23
                  else
                    @index = i6
                    r6 = nil
                  end
                end
              end
              if r6
                r5 = r6
              else
                r5 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r5
              if r5
                r30 = _nt_prescan_rest
                s0 << r30
                if r30
                  i31 = index
                  r32 = lambda {|s|
                            # Wipe any terminal failures that were added:
                            @terminal_failures = []
                            @max_terminal_failure_index = start_index
                  
                            # puts "========== prescan is complete on #{(s.map{|e|e.text_value}*" ").inspect} =========="
                            false
                          }.call(s0)
                  if !r32
                    terminal_parse_failure("<semantic predicate>")
                  end
                  if r32
                    @index = i31
                    r31 = instantiate_node(SyntaxNode,input, index...index)
                  else
                    @index = i31
                    r31 = nil
                  end
                  s0 << r31
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(Prescan3)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:prescan][start_index] = r0

        r0
      end

      module PrescanRest0
        def as
          elements[1]
        end

        def S
          elements[2]
        end

        def term_definition_name
          elements[3]
        end

        def s1
          elements[4]
        end

        def s2
          elements[6]
        end

      end

      module PrescanRest1
        def s
          elements[3]
        end
      end

      def _nt_prescan_rest
        start_index = index
        if node_cache[:prescan_rest].has_key?(index)
          cached = node_cache[:prescan_rest][index]
          if cached
            node_cache[:prescan_rest][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        i1 = index
        r2 = lambda {|s| input.context.reset_role_names }.call(s0)
        if !r2
          terminal_parse_failure("<semantic predicate>")
        end
        if r2
          @index = i1
          r1 = instantiate_node(SyntaxNode,input, index...index)
        else
          @index = i1
          r1 = nil
        end
        s0 << r1
        if r1
          s3, i3 = [], index
          loop do
            i4 = index
            r5 = _nt_context_note
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r4 = r5
            else
              i6, s6 = index, []
              if (match_len = has_terminal?('(', false, index))
                r7 = true
                @index += match_len
              else
                terminal_parse_failure('\'(\'')
                r7 = nil
              end
              s6 << r7
              if r7
                r8 = _nt_as
                s6 << r8
                if r8
                  r9 = _nt_S
                  s6 << r9
                  if r9
                    r10 = _nt_term_definition_name
                    s6 << r10
                    if r10
                      r11 = _nt_s
                      s6 << r11
                      if r11
                        if (match_len = has_terminal?(')', false, index))
                          r12 = true
                          @index += match_len
                        else
                          terminal_parse_failure('\')\'')
                          r12 = nil
                        end
                        s6 << r12
                        if r12
                          r13 = _nt_s
                          s6 << r13
                          if r13
                            i14 = index
                            r15 = lambda {|s| input.context.role_name(s[3].value) }.call(s6)
                            if !r15
                              terminal_parse_failure("<semantic predicate>")
                            end
                            if r15
                              @index = i14
                              r14 = instantiate_node(SyntaxNode,input, index...index)
                            else
                              @index = i14
                              r14 = nil
                            end
                            s6 << r14
                          end
                        end
                      end
                    end
                  end
                end
              end
              if s6.last
                r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
                r6.extend(PrescanRest0)
              else
                @index = i6
                r6 = nil
              end
              if r6
                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                r4 = r6
              else
                r16 = _nt_new_derived_value
                if r16
                  r16 = SyntaxNode.new(input, (index-1)...index) if r16 == true
                  r4 = r16
                else
                  r17 = _nt_new_adjective_term
                  if r17
                    r17 = SyntaxNode.new(input, (index-1)...index) if r17 == true
                    r4 = r17
                  else
                    r18 = _nt_global_term
                    if r18
                      r18 = SyntaxNode.new(input, (index-1)...index) if r18 == true
                      r4 = r18
                    else
                      r19 = _nt_prescan_aggregate
                      if r19
                        r19 = SyntaxNode.new(input, (index-1)...index) if r19 == true
                        r4 = r19
                      else
                        r20 = _nt_id
                        if r20
                          r20 = SyntaxNode.new(input, (index-1)...index) if r20 == true
                          r4 = r20
                        else
                          r21 = _nt_range
                          if r21
                            r21 = SyntaxNode.new(input, (index-1)...index) if r21 == true
                            r4 = r21
                          else
                            r22 = _nt_comparator
                            if r22
                              r22 = SyntaxNode.new(input, (index-1)...index) if r22 == true
                              r4 = r22
                            else
                              r23 = _nt_S
                              if r23
                                r23 = SyntaxNode.new(input, (index-1)...index) if r23 == true
                                r4 = r23
                              else
                                if has_terminal?(@regexps[gr = '\A[-+{}\\[\\].,:^/%*()]'] ||= Regexp.new(gr), :regexp, index)
                                  r24 = true
                                  @index += 1
                                else
                                  terminal_parse_failure('[-+{}\\[\\].,:^/%*()]')
                                  r24 = nil
                                end
                                if r24
                                  r24 = SyntaxNode.new(input, (index-1)...index) if r24 == true
                                  r4 = r24
                                else
                                  @index = i4
                                  r4 = nil
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
            if r4
              s3 << r4
            else
              break
            end
          end
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          s0 << r3
          if r3
            if has_terminal?(@regexps[gr = '\A[?;]'] ||= Regexp.new(gr), :regexp, index)
              r25 = true
              @index += 1
            else
              terminal_parse_failure('[?;]')
              r25 = nil
            end
            s0 << r25
            if r25
              r26 = _nt_s
              s0 << r26
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(PrescanRest1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:prescan_rest][start_index] = r0

        r0
      end

      module PrescanAggregate0
        def aggregate_type
          elements[0]
        end

        def s1
          elements[1]
        end

        def agg_of
          elements[2]
        end

        def s2
          elements[3]
        end

        def global_term
          elements[4]
        end

        def agg_in
          elements[5]
        end

        def s3
          elements[6]
        end

      end

      def _nt_prescan_aggregate
        start_index = index
        if node_cache[:prescan_aggregate].has_key?(index)
          cached = node_cache[:prescan_aggregate][index]
          if cached
            node_cache[:prescan_aggregate][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_id
        s0 << r1
        if r1
          r2 = _nt_s
          s0 << r2
          if r2
            r3 = _nt_agg_of
            s0 << r3
            if r3
              r4 = _nt_s
              s0 << r4
              if r4
                r5 = _nt_global_term
                s0 << r5
                if r5
                  r6 = _nt_agg_in
                  s0 << r6
                  if r6
                    r7 = _nt_s
                    s0 << r7
                    if r7
                      i8 = index
                      if (match_len = has_terminal?('(', false, index))
                        r9 = true
                        @index += match_len
                      else
                        terminal_parse_failure('\'(\'')
                        r9 = nil
                      end
                      if r9
                        @index = i8
                        r8 = instantiate_node(SyntaxNode,input, index...index)
                      else
                        @index = i8
                        r8 = nil
                      end
                      s0 << r8
                    end
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(PrescanAggregate0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:prescan_aggregate][start_index] = r0

        r0
      end

      module NewDerivedValue0
        def id
          elements[1]
        end

        def s
          elements[3]
        end

      end

      module NewDerivedValue1
        def s1
          elements[1]
        end

        def id
          elements[3]
        end

        def s2
          elements[5]
        end

      end

      def _nt_new_derived_value
        start_index = index
        if node_cache[:new_derived_value].has_key?(index)
          cached = node_cache[:new_derived_value][index]
          if cached
            node_cache[:new_derived_value][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        i1, s1 = index, []
        i2 = index
        r3 = _nt_global_term
        if r3
          @index = i2
          r2 = nil
        else
          @index = i2
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r2
        if r2
          r4 = _nt_id
          s1 << r4
          if r4
            r6 = _nt_derived_value_continuation
            if r6
              r5 = r6
            else
              r5 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r5
            if r5
              r7 = _nt_s
              s1 << r7
              if r7
                if (match_len = has_terminal?('=', false, index))
                  r8 = true
                  @index += match_len
                else
                  terminal_parse_failure('\'=\'')
                  r8 = nil
                end
                s1 << r8
                if r8
                  i9 = index
                  r10 = lambda {|s|
                              name = [s[1].text_value] + (s[2].empty? ? [] : s[2].value)
                              input.context.object_type(name*' ', "derived value type")
                            }.call(s1)
                  if !r10
                    terminal_parse_failure("<semantic predicate>")
                  end
                  if r10
                    @index = i9
                    r9 = instantiate_node(SyntaxNode,input, index...index)
                  else
                    @index = i9
                    r9 = nil
                  end
                  s1 << r9
                end
              end
            end
          end
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(NewDerivedValue0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
          r0 = r1
        else
          i11, s11 = index, []
          if (match_len = has_terminal?('=', false, index))
            r12 = true
            @index += match_len
          else
            terminal_parse_failure('\'=\'')
            r12 = nil
          end
          s11 << r12
          if r12
            r13 = _nt_s
            s11 << r13
            if r13
              i14 = index
              r15 = _nt_global_term
              if r15
                @index = i14
                r14 = nil
              else
                @index = i14
                r14 = instantiate_node(SyntaxNode,input, index...index)
              end
              s11 << r14
              if r14
                r16 = _nt_id
                s11 << r16
                if r16
                  r18 = _nt_derived_value_continuation
                  if r18
                    r17 = r18
                  else
                    r17 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s11 << r17
                  if r17
                    r19 = _nt_s
                    s11 << r19
                    if r19
                      i20 = index
                      r21 = _nt_that
                      if r21
                        r21 = SyntaxNode.new(input, (index-1)...index) if r21 == true
                        r20 = r21
                      else
                        r22 = _nt_who
                        if r22
                          r22 = SyntaxNode.new(input, (index-1)...index) if r22 == true
                          r20 = r22
                        else
                          @index = i20
                          r20 = nil
                        end
                      end
                      s11 << r20
                      if r20
                        i23 = index
                        r24 = lambda {|s|
                                    name = [s[3].text_value] + (s[4].empty? ? [] : s[4].value)
                                    input.context.object_type(name*' ', "derived value type")
                                  }.call(s11)
                        if !r24
                          terminal_parse_failure("<semantic predicate>")
                        end
                        if r24
                          @index = i23
                          r23 = instantiate_node(SyntaxNode,input, index...index)
                        else
                          @index = i23
                          r23 = nil
                        end
                        s11 << r23
                      end
                    end
                  end
                end
              end
            end
          end
          if s11.last
            r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
            r11.extend(NewDerivedValue1)
          else
            @index = i11
            r11 = nil
          end
          if r11
            r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
            r0 = r11
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:new_derived_value][start_index] = r0

        r0
      end

      module DerivedValueContinuation0
        def s
          elements[0]
        end

        def id
          elements[3]
        end
      end

      module DerivedValueContinuation1
        def s
          elements[0]
        end

        def tail
          elements[2]
        end
      end

      module DerivedValueContinuation2
        def value
          tail.elements.map{|e| e.id.text_value}
        end
      end

      def _nt_derived_value_continuation
        start_index = index
        if node_cache[:derived_value_continuation].has_key?(index)
          cached = node_cache[:derived_value_continuation][index]
          if cached
            node_cache[:derived_value_continuation][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_s
        s0 << r1
        if r1
          if (match_len = has_terminal?('-', false, index))
            r2 = true
            @index += match_len
          else
            terminal_parse_failure('\'-\'')
            r2 = nil
          end
          s0 << r2
          if r2
            s3, i3 = [], index
            loop do
              i4, s4 = index, []
              r5 = _nt_s
              s4 << r5
              if r5
                i6 = index
                r7 = _nt_global_term
                if r7
                  @index = i6
                  r6 = nil
                else
                  @index = i6
                  r6 = instantiate_node(SyntaxNode,input, index...index)
                end
                s4 << r6
                if r6
                  i8 = index
                  i9 = index
                  r10 = _nt_that
                  if r10
                    r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                    r9 = r10
                  else
                    r11 = _nt_who
                    if r11
                      r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
                      r9 = r11
                    else
                      @index = i9
                      r9 = nil
                    end
                  end
                  if r9
                    @index = i8
                    r8 = nil
                    terminal_parse_failure("(any alternative)", true)
                  else
                    @terminal_failures.pop
                    @index = i8
                    r8 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s4 << r8
                  if r8
                    r12 = _nt_id
                    s4 << r12
                  end
                end
              end
              if s4.last
                r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
                r4.extend(DerivedValueContinuation0)
              else
                @index = i4
                r4 = nil
              end
              if r4
                s3 << r4
              else
                break
              end
            end
            r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
            s0 << r3
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(DerivedValueContinuation1)
          r0.extend(DerivedValueContinuation2)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:derived_value_continuation][start_index] = r0

        r0
      end

      module NewAdjectiveTerm0
        def adj
          elements[1]
        end

        def lead_intervening
          elements[4]
        end

        def s
          elements[5]
        end

        def global_term
          elements[6]
        end

      end

      module NewAdjectiveTerm1
        def global_term
          elements[0]
        end

        def s
          elements[1]
        end

        def trail_intervening
          elements[2]
        end

        def adj
          elements[6]
        end

      end

      def _nt_new_adjective_term
        start_index = index
        if node_cache[:new_adjective_term].has_key?(index)
          cached = node_cache[:new_adjective_term][index]
          if cached
            node_cache[:new_adjective_term][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        i1, s1 = index, []
        i2 = index
        r3 = _nt_global_term
        if r3
          @index = i2
          r2 = nil
        else
          @index = i2
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r2
        if r2
          r4 = _nt_id
          s1 << r4
          if r4
            if (match_len = has_terminal?('-', false, index))
              r5 = true
              @index += match_len
            else
              terminal_parse_failure('\'-\'')
              r5 = nil
            end
            s1 << r5
            if r5
              if (match_len = has_terminal?('-', false, index))
                r7 = true
                @index += match_len
              else
                terminal_parse_failure('\'-\'')
                r7 = nil
              end
              if r7
                r6 = r7
              else
                r6 = instantiate_node(SyntaxNode,input, index...index)
              end
              s1 << r6
              if r6
                r8 = _nt_lead_intervening
                s1 << r8
                if r8
                  r9 = _nt_s
                  s1 << r9
                  if r9
                    r10 = _nt_global_term
                    s1 << r10
                    if r10
                      i11 = index
                      r12 = lambda {|s| adj = [s[1].text_value, s[4].value].compact*" "; input.context.new_leading_adjective_term(adj, s[6].text_value) }.call(s1)
                      if !r12
                        terminal_parse_failure("<semantic predicate>")
                      end
                      if r12
                        @index = i11
                        r11 = instantiate_node(SyntaxNode,input, index...index)
                      else
                        @index = i11
                        r11 = nil
                      end
                      s1 << r11
                    end
                  end
                end
              end
            end
          end
        end
        if s1.last
          r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
          r1.extend(NewAdjectiveTerm0)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
          r0 = r1
        else
          i13, s13 = index, []
          r14 = _nt_global_term
          s13 << r14
          if r14
            r15 = _nt_s
            s13 << r15
            if r15
              r16 = _nt_trail_intervening
              s13 << r16
              if r16
                if (match_len = has_terminal?('-', false, index))
                  r17 = true
                  @index += match_len
                else
                  terminal_parse_failure('\'-\'')
                  r17 = nil
                end
                s13 << r17
                if r17
                  if (match_len = has_terminal?('-', false, index))
                    r19 = true
                    @index += match_len
                  else
                    terminal_parse_failure('\'-\'')
                    r19 = nil
                  end
                  if r19
                    r18 = r19
                  else
                    r18 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s13 << r18
                  if r18
                    i20 = index
                    r21 = _nt_global_term
                    if r21
                      @index = i20
                      r20 = nil
                    else
                      @index = i20
                      r20 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s13 << r20
                    if r20
                      r22 = _nt_id
                      s13 << r22
                      if r22
                        i23 = index
                        r24 = lambda {|s| adj = [s[2].value, s[6].text_value].compact*" "; input.context.new_trailing_adjective_term(adj, s[0].text_value) }.call(s13)
                        if !r24
                          terminal_parse_failure("<semantic predicate>")
                        end
                        if r24
                          @index = i23
                          r23 = instantiate_node(SyntaxNode,input, index...index)
                        else
                          @index = i23
                          r23 = nil
                        end
                        s13 << r23
                      end
                    end
                  end
                end
              end
            end
          end
          if s13.last
            r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
            r13.extend(NewAdjectiveTerm1)
          else
            @index = i13
            r13 = nil
          end
          if r13
            r13 = SyntaxNode.new(input, (index-1)...index) if r13 == true
            r0 = r13
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:new_adjective_term][start_index] = r0

        r0
      end

      module LeadIntervening0
        def S
          elements[0]
        end

        def id
          elements[2]
        end
      end

      module LeadIntervening1
        def value
          elements.size == 0 ? nil : elements.map{|e| e.id.text_value}*" "
        end
      end

      def _nt_lead_intervening
        start_index = index
        if node_cache[:lead_intervening].has_key?(index)
          cached = node_cache[:lead_intervening][index]
          if cached
            node_cache[:lead_intervening][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        s0, i0 = [], index
        loop do
          i1, s1 = index, []
          r2 = _nt_S
          s1 << r2
          if r2
            i3 = index
            r4 = _nt_global_term
            if r4
              @index = i3
              r3 = nil
            else
              @index = i3
              r3 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r3
            if r3
              r5 = _nt_id
              s1 << r5
            end
          end
          if s1.last
            r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
            r1.extend(LeadIntervening0)
          else
            @index = i1
            r1 = nil
          end
          if r1
            s0 << r1
          else
            break
          end
        end
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(LeadIntervening1)
        r0.extend(LeadIntervening1)

        node_cache[:lead_intervening][start_index] = r0

        r0
      end

      module TrailIntervening0
        def id
          elements[1]
        end

        def S
          elements[2]
        end
      end

      module TrailIntervening1
        def value
          elements.size == 0 ? nil : elements.map{|e| e.id.text_value}*" "
        end
      end

      def _nt_trail_intervening
        start_index = index
        if node_cache[:trail_intervening].has_key?(index)
          cached = node_cache[:trail_intervening][index]
          if cached
            node_cache[:trail_intervening][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        s0, i0 = [], index
        loop do
          i1, s1 = index, []
          i2 = index
          r3 = _nt_global_term
          if r3
            @index = i2
            r2 = nil
          else
            @index = i2
            r2 = instantiate_node(SyntaxNode,input, index...index)
          end
          s1 << r2
          if r2
            r4 = _nt_id
            s1 << r4
            if r4
              r5 = _nt_S
              s1 << r5
            end
          end
          if s1.last
            r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
            r1.extend(TrailIntervening0)
          else
            @index = i1
            r1 = nil
          end
          if r1
            s0 << r1
          else
            break
          end
        end
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(TrailIntervening1)
        r0.extend(TrailIntervening1)

        node_cache[:trail_intervening][start_index] = r0

        r0
      end

      module Term0
        def s1
          elements[0]
        end

        def dbl
          elements[2]
        end

        def s2
          elements[3]
        end

        def w
          elements[4]
        end

      end

      module Term1
        def s
          elements[0]
        end

        def head
          elements[1]
        end

        def x
          elements[2]
        end

        def tail
          elements[4]
        end

      end

      module Term2
        def s1
          elements[0]
        end

        def head
          elements[1]
        end

        def s2
          elements[4]
        end

        def term
          elements[5]
        end

      end

      def _nt_term
        start_index = index
        if node_cache[:term].has_key?(index)
          cached = node_cache[:term][index]
          if cached
            node_cache[:term][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        i1, s1 = index, []
        r2 = _nt_s
        s1 << r2
        if r2
          r3 = _nt_id
          s1 << r3
          if r3
            r4 = _nt_x
            s1 << r4
            if r4
              i5 = index
              r6 = lambda {|s| w = s[1].text_value; input.context.term_starts?(w, s[2]) }.call(s1)
              if !r6
                terminal_parse_failure("<semantic predicate>")
              end
              if r6
                @index = i5
                r5 = instantiate_node(SyntaxNode,input, index...index)
              else
                @index = i5
                r5 = nil
              end
              s1 << r5
              if r5
                s7, i7 = [], index
                loop do
                  i8, s8 = index, []
                  r9 = _nt_s
                  s8 << r9
                  if r9
                    if (match_len = has_terminal?('-', false, index))
                      r11 = true
                      @index += match_len
                    else
                      terminal_parse_failure('\'-\'')
                      r11 = nil
                    end
                    if r11
                      r10 = r11
                    else
                      r10 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s8 << r10
                    if r10
                      if (match_len = has_terminal?('-', false, index))
                        r13 = true
                        @index += match_len
                      else
                        terminal_parse_failure('\'-\'')
                        r13 = nil
                      end
                      if r13
                        r12 = r13
                      else
                        r12 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s8 << r12
                      if r12
                        r14 = _nt_s
                        s8 << r14
                        if r14
                          r15 = _nt_id
                          s8 << r15
                          if r15
                            i16 = index
                            r17 = lambda {|s| w = s[4].text_value; input.context.term_continues?(w) }.call(s8)
                            if !r17
                              terminal_parse_failure("<semantic predicate>")
                            end
                            if r17
                              @index = i16
                              r16 = instantiate_node(SyntaxNode,input, index...index)
                            else
                              @index = i16
                              r16 = nil
                            end
                            s8 << r16
                          end
                        end
                      end
                    end
                  end
                  if s8.last
                    r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
                    r8.extend(Term0)
                  else
                    @index = i8
                    r8 = nil
                  end
                  if r8
                    s7 << r8
                  else
                    break
                  end
                end
                r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
                s1 << r7
                if r7
                  i18 = index
                  r19 = lambda {|s| input.context.term_complete? }.call(s1)
                  if !r19
                    terminal_parse_failure("<semantic predicate>")
                  end
                  if r19
                    @index = i18
                    r18 = instantiate_node(SyntaxNode,input, index...index)
                  else
                    @index = i18
                    r18 = nil
                  end
                  s1 << r18
                end
              end
            end
          end
        end
        if s1.last
          r1 = instantiate_node(Parser::TermNode,input, i1...index, s1)
          r1.extend(Term1)
        else
          @index = i1
          r1 = nil
        end
        if r1
          r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
          r0 = r1
        else
          i20, s20 = index, []
          r21 = _nt_s
          s20 << r21
          if r21
            r22 = _nt_id
            s20 << r22
            if r22
              if (match_len = has_terminal?('-', false, index))
                r23 = true
                @index += match_len
              else
                terminal_parse_failure('\'-\'')
                r23 = nil
              end
              s20 << r23
              if r23
                if (match_len = has_terminal?('-', false, index))
                  r25 = true
                  @index += match_len
                else
                  terminal_parse_failure('\'-\'')
                  r25 = nil
                end
                if r25
                  r24 = r25
                else
                  r24 = instantiate_node(SyntaxNode,input, index...index)
                end
                s20 << r24
                if r24
                  r26 = _nt_s
                  s20 << r26
                  if r26
                    r27 = _nt_term
                    s20 << r27
                    if r27
                      i28 = index
                      r29 = lambda {|s| s[5].ast.leading_adjective == nil }.call(s20)
                      if !r29
                        terminal_parse_failure("<semantic predicate>")
                      end
                      if r29
                        @index = i28
                        r28 = instantiate_node(SyntaxNode,input, index...index)
                      else
                        @index = i28
                        r28 = nil
                      end
                      s20 << r28
                    end
                  end
                end
              end
            end
          end
          if s20.last
            r20 = instantiate_node(Parser::TermLANode,input, i20...index, s20)
            r20.extend(Term2)
          else
            @index = i20
            r20 = nil
          end
          if r20
            r20 = SyntaxNode.new(input, (index-1)...index) if r20 == true
            r0 = r20
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:term][start_index] = r0

        r0
      end

      def _nt_x
        start_index = index
        if node_cache[:x].has_key?(index)
          cached = node_cache[:x][index]
          if cached
            node_cache[:x][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        if (match_len = has_terminal?('', false, index))
          r0 = instantiate_node(SavedContext,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'\'')
          r0 = nil
        end

        node_cache[:x][start_index] = r0

        r0
      end

      module GlobalTerm0
        def s
          elements[0]
        end

        def w
          elements[1]
        end

      end

      module GlobalTerm1
        def head
          elements[0]
        end

        def x
          elements[1]
        end

        def tail
          elements[3]
        end
      end

      module GlobalTerm2
        def value
                   tail.elements.inject(head.value) { |t, e| "#{t} #{e.w.value}" }
                 end
      end

      def _nt_global_term
        start_index = index
        if node_cache[:global_term].has_key?(index)
          cached = node_cache[:global_term][index]
          if cached
            node_cache[:global_term][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_id
        s0 << r1
        if r1
          r2 = _nt_x
          s0 << r2
          if r2
            i3 = index
            r4 = lambda {|s| input.context.term_starts?(s[0].text_value, s[1]) }.call(s0)
            if !r4
              terminal_parse_failure("<semantic predicate>")
            end
            if r4
              @index = i3
              r3 = instantiate_node(SyntaxNode,input, index...index)
            else
              @index = i3
              r3 = nil
            end
            s0 << r3
            if r3
              s5, i5 = [], index
              loop do
                i6, s6 = index, []
                r7 = _nt_s
                s6 << r7
                if r7
                  r8 = _nt_id
                  s6 << r8
                  if r8
                    i9 = index
                    r10 = lambda {|s| input.context.term_continues?(s[1].text_value) }.call(s6)
                    if !r10
                      terminal_parse_failure("<semantic predicate>")
                    end
                    if r10
                      @index = i9
                      r9 = instantiate_node(SyntaxNode,input, index...index)
                    else
                      @index = i9
                      r9 = nil
                    end
                    s6 << r9
                  end
                end
                if s6.last
                  r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
                  r6.extend(GlobalTerm0)
                else
                  @index = i6
                  r6 = nil
                end
                if r6
                  s5 << r6
                else
                  break
                end
              end
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              s0 << r5
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(GlobalTerm1)
          r0.extend(GlobalTerm2)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:global_term][start_index] = r0

        r0
      end

      def _nt_non_phrase
        start_index = index
        if node_cache[:non_phrase].has_key?(index)
          cached = node_cache[:non_phrase][index]
          if cached
            node_cache[:non_phrase][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_and
        if r1
          r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
          r0 = r1
        else
          r2 = _nt_but
          if r2
            r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
            r0 = r2
          else
            r3 = _nt_if
            if r3
              r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
              r0 = r3
            else
              r4 = _nt_role_list_constraint_followers
              if r4
                r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
                r0 = r4
              else
                r5 = _nt_only_if
                if r5
                  r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
                  r0 = r5
                else
                  r6 = _nt_or
                  if r6
                    r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                    r0 = r6
                  else
                    r7 = _nt_quantifier
                    if r7
                      r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                      r0 = r7
                    else
                      r8 = _nt_returning
                      if r8
                        r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                        r0 = r8
                      else
                        r9 = _nt_then
                        if r9
                          r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                          r0 = r9
                        else
                          r10 = _nt_value_constraint
                          if r10
                            r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                            r0 = r10
                          else
                            r11 = _nt_where
                            if r11
                              r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
                              r0 = r11
                            else
                              @index = i0
                              r0 = nil
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end

        node_cache[:non_phrase][start_index] = r0

        r0
      end

    end

    class TermsParser < Treetop::Runtime::CompiledParser
      include Terms
    end

  end
end
