#
#       ActiveFacts CQL Parser.
#       Parse rules relating to FactType definitions.
#
# Copyright (c) 2009 Clifford Heath. Read the LICENSE file.
#
module ActiveFacts
  module CQL
    grammar FactTypes
      rule query
        s query_clauses r:returning_clause? '?'
        {
          def ast
            Compiler::FactType.new nil, [], query_clauses.ast, (r.empty? ? nil : r)
          end
        }
      end

      rule fact_type
        s each:(each)?	    # Chew the "each" or it will get accepted as a quantifier
	name:(s term_definition_name mapping_pragmas is_where)?	  # Name of objectifying entity type
        anonymous_fact_type <Parser::FactType>
      end

      rule anonymous_fact_type
        query_clauses
	  conditions:((':' / where) s a:query_clauses s
	    returning_clause?
	  )?
        s ';' <Parser::AnonymousFactType>
      end

      rule query_clauses
        qualified_clauses
          # REVISIT: This creates no precedence between and/or, which could cause confusion.
          # Should disallow mixed conjunctions - using a sempred?
          ftail:( conjunction:(',' / and / or ) s qualified_clauses s )*
        {
          def ast
            clauses_ast = qualified_clauses.ast
            ftail.elements.each{|e|
              conjunction = e.conjunction.text_value
              # conjunction = 'and' if conjunction == ','   # ',' means AND, but disallows left-contractions
              clauses_ast += e.qualified_clauses.ast(conjunction)
            }
            clauses_ast
          end
        }
      end

      rule returning_clause
        returning s return (s ',' s return)*
      end

      rule return
        ordering_prefix? noun_phrase+
      end

      rule qualified_clauses
        s certainty s contracted_clauses s p:post_qualifiers? s c:context_note?
        {
          def ast(conjunction = nil)
            r = contracted_clauses.ast  # An array of clause asts
            r[0].conjunction = conjunction
            # pre-qualifiers apply to the first clause, post_qualifiers and context_note to the last
            # REVISIT: This may be incorrect where the last is a nested clause
            r[0].certainty = certainty.value
            r[-1].qualifiers += p.list unless p.empty?
            r[-1].context_note = c.ast unless c.empty?
            r
          end
        }
      end

      rule certainty
        negative_prefix { def value; false; end }
        /
        maybe { def value; nil; end }
        /
        definitely { def value; true; end }
        /
        '' { def value; true; end }
      end

      rule post_qualifiers
        '[' s q0:post_qualifier tail:( s ',' s q1:post_qualifier )* s ']' s
        {
          def list
            [q0.text_value, *tail.elements.map{|e| e.q1.text_value}]
          end
        }
      end

      rule post_qualifier
        static / transient /
        intransitive / stronglyintransitive / transitive / acyclic / symmetric / asymmetric / antisymmetric / reflexive / irreflexive
      end

      rule clauses_list
        clauses tail:( ',' s clauses )*
        {
          def ast
            [clauses.ast, *tail.elements.map{|e| e.clauses.ast }]
          end
        }
      end

      rule clauses
	# REVISIT: We should contract on "or" as well:
        contracted_clauses s tail:( and s contracted_clauses s )*
        {
          def ast
            clauses = contracted_clauses.ast
            tail.elements.map{|e| clauses += e.contracted_clauses.ast }
            clauses
          end
        }
      end

      rule contracted_clauses
        comparison
        /
        (
          contraction     # A contraction will terminate this repetition by eating to the end
          /
	  noun_phrase     # A role reference containing a term, perhaps with attached paraphernalia
	  /
	  linking_word	  # A word that is part of a fact type reading
        )+
        {
          def ast
            asts = elements.map{ |r| r.ast }
            contracted_clauses = []
            qualifiers = []
            if asts[-1].is_a?(Array)        # A contraction (Array of [noun_phrase, qualifiers, *clauses])
              contracted_clauses = asts.pop         # Pull off the contracted_clauses
              contracted_noun_phrase = contracted_clauses.shift
              qualifiers = contracted_clauses.shift
              asts.push(contracted_noun_phrase)  # And replace it by the noun_phrase removed from the contracted_clauses
            end
            clause_ast = Compiler::Clause.new(asts, qualifiers)
            [clause_ast] + contracted_clauses
          end
        }
      end

      rule contraction
        reading_contraction /
        condition_contraction
      end

      rule reading_contraction
        noun_phrase p:post_qualifiers? conjunction:(that/who) s certainty s contracted_clauses s
        {
          def ast
            # contracted_clauses.ast will return an array of Clauses, but the first clause is special. We must:
            # * prepend a new noun_phrase (we get the Role to build *two* ast nodes)
            # * attach the qualifiers
            clauses_ast = contracted_clauses.ast
            clauses_ast[0].conjunction = conjunction.text_value
            clauses_ast[0].phrases.unshift(noun_phrase.ast)
            clauses_ast[0].certainty = certainty.value

            # A contraction returns an array containing:
            # * a noun_phrase AST
            # * a qualifiers array
            # * an array of Clauses
            [noun_phrase.ast, p.empty? ? [] : p.list] + clauses_ast
          end
        }
      end

      rule condition_contraction
        noun_phrase pq:post_qualifiers? certainty s comparator s e2:expression
          !(noun_phrase / linking_word)	# The contracted_clauses must not continue here!
        {
          def ast
            c = Compiler::Comparison.new(comparator.text_value, noun_phrase.ast, e2.ast, certainty.value)
            c.conjunction = comparator.text_value
            [ noun_phrase.ast, pq.empty? ? [] : pq.list, c ]
          end
        }
      end

      rule comparison
        e1:expression s certainty s comparator s contraction p:post_qualifiers?
        {
          def ast
            noun_phrase, qualifiers, *clauses_ast = *contraction.ast
            clauses_ast[0].qualifiers += p.list unless p.empty? # apply post_qualifiers to the contracted clause
            # clauses_ast[0].conjunction = 'and' # AND is implicit for a contraction
            c = Compiler::Comparison.new(comparator.text_value, e1.ast, noun_phrase, certainty.value)
            [c] + clauses_ast
          end
        }
        /
        certainty e1:expression s comparator s e2:expression # comparisons have no post-qualifiers: p:post_qualifiers?
        {
          def ast
            c = Compiler::Comparison.new(comparator.text_value, e1.ast, e2.ast, certainty.value)
            [c]
          end
        }
      end

      rule comparator
        '<=' / '<>' / '<' / '=' / '>=' / '>' / '!='
      end

      rule linking_word
	(
	  id tail:('-' !term id)+ s       # A hyphenated non-term. Important: no embedded spaces
	    {
	      def ast
		[id.value, *tail.elements.map{|e| e.id.value}]*"-"
	      end
	    }
	  /       # A normal non-term
	  !non_phrase id s
	    {
	      def ast
		id.value
	      end
	    }
	)
	{
	  def node_type; :linking; end
	}
      end

      rule noun_phrase
        aggregate
        /
        simple_noun_phrase
      end

      rule aggregate_operation
	id
      end

      rule aggregate
        aggregate_operation s agg_of s term_or_unary s agg_in s '(' qualified_clauses s ')' <Parser::Aggregate>
	# REVISIT: Need examples to verify that qualified_clauses is the right level (not query_clauses, etc)
      end

      rule role_quantifier
        quantifier mapping_pragmas enforcement cn:context_note? <Parser::RoleQuantifier>
      end

      rule simple_noun_phrase
        q:role_quantifier?		  # e.g. "at most one"
        player:derived_variable		  # e.g. "Height"
        lr:(
	  literal u:unit?		  # e.g. "27 inches"
	  / value_constraint enforcement  # e.g. "restricted to {1..4}"
	)?
        oj:objectification_step?	  # "(in which <sub-expression>)"
        <Parser::SimpleNounPhrase>
      end

      rule objectification_step
        '(' s in_which s facts:query_clauses s ')' s
        {
          def ast
            facts.ast
          end
        }
      end

      rule role_name
        '(' s as S r:term s ')' s
        { def value; r.value; end }
      end

      rule subscript
        '(' s i:([1-9] [0-9]*) s ')' s 
        { def value; i.text_value.to_i; end }
      end

    end
  end
end
